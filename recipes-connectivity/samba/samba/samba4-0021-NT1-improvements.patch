From 30d6909d681f71381ca2f3ee733c7d53265779f5 Mon Sep 17 00:00:00 2001
From: Stefan Metzmacher <metze@samba.org>
Date: Wed, 4 Dec 2013 23:31:10 +0100
Subject: [PATCH 1/2] s3:lib: avoid talloc_zero_array() in poll_one_fd()

Signed-off-by: Stefan Metzmacher <metze@samba.org>
---
 source3/lib/util_sock.c |   19 +++++--------------
 1 file changed, 5 insertions(+), 14 deletions(-)

diff --git a/source3/lib/util_sock.c b/source3/lib/util_sock.c
index 7fcb9c4..9856ae3 100644
--- a/source3/lib/util_sock.c
+++ b/source3/lib/util_sock.c
@@ -1606,27 +1606,18 @@ int getaddrinfo_recv(struct tevent_req *req, struct addrinfo **res)
 
 int poll_one_fd(int fd, int events, int timeout, int *revents)
 {
-	struct pollfd *fds;
+	struct pollfd pfd;
 	int ret;
-	int saved_errno;
 
-	fds = talloc_zero_array(talloc_tos(), struct pollfd, 1);
-	if (fds == NULL) {
-		errno = ENOMEM;
-		return -1;
-	}
-	fds[0].fd = fd;
-	fds[0].events = events;
+	pfd.fd = fd;
+	pfd.events = events;
 
-	ret = poll(fds, 1, timeout);
+	ret = poll(&pfd, 1, timeout);
 
 	/*
 	 * Assign whatever poll did, even in the ret<=0 case.
 	 */
-	*revents = fds[0].revents;
-	saved_errno = errno;
-	TALLOC_FREE(fds);
-	errno = saved_errno;
+	*revents = pfd.revents;
 
 	return ret;
 }
-- 
1.7.9.5


From 927fe0e4b35dee05c7aef480e1630d74d5ded950 Mon Sep 17 00:00:00 2001
From: Stefan Metzmacher <metze@samba.org>
Date: Wed, 11 Dec 2013 15:02:27 +0100
Subject: [PATCH 2/2] s3:smbd: avoid calling fd_is_readable() without async
 echo handler

Signed-off-by: Stefan Metzmacher <metze@samba.org>
---
 source3/smbd/process.c |   24 +++++++++++++-----------
 1 file changed, 13 insertions(+), 11 deletions(-)

diff --git a/source3/smbd/process.c b/source3/smbd/process.c
index 3bf10de..5684dde 100644
--- a/source3/smbd/process.c
+++ b/source3/smbd/process.c
@@ -2381,21 +2381,23 @@ static void smbd_server_connection_read_handler(
 	NTSTATUS status;
 	uint32_t seqnum;
 
-	bool from_client;
+	bool async_echo = lp_async_smb_echo_handler();
+	bool from_client = false;
 
-	if (lp_async_smb_echo_handler()
-	    && fd_is_readable(sconn->smb1.echo_handler.trusted_fd)) {
-		/*
-		 * This is the super-ugly hack to prefer the packets
-		 * forwarded by the echo handler over the ones by the
-		 * client directly
-		 */
-		fd = sconn->smb1.echo_handler.trusted_fd;
+	if (async_echo) {
+		if (fd_is_readable(sconn->smb1.echo_handler.trusted_fd)) {
+			/*
+			 * This is the super-ugly hack to prefer the packets
+			 * forwarded by the echo handler over the ones by the
+			 * client directly
+			 */
+			fd = sconn->smb1.echo_handler.trusted_fd;
+		}
 	}
 
 	from_client = (sconn->sock == fd);
 
-	if (from_client) {
+	if (async_echo && from_client) {
 		smbd_lock_socket(sconn);
 
 		if (!fd_is_readable(fd)) {
@@ -2414,7 +2416,7 @@ static void smbd_server_connection_read_handler(
 				    &inbuf_len, &seqnum,
 				    !from_client /* trusted channel */);
 
-	if (from_client) {
+	if (async_echo && from_client) {
 		smbd_unlock_socket(sconn);
 	}
 
-- 
1.7.9.5

